[{"/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/index.js":"1","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/reportWebVitals.js":"2","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/App.js":"3","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/Sidebar/index.js":"4","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/Sidebar/Sidebar.js":"5","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/entities.js":"6","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/GridScreen/index.js":"7","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/GridScreen/GridScreen.js":"8","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/Grid/Grid.js":"9","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/alphabet.js":"10","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/GridScreen/CellForm/index.js":"11","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/GridScreen/CellForm/CellForm.js":"12","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/cells.js":"13","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/EntityForm/index.js":"14","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/EntityForm/EntityForm.js":"15","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/services/cache.js":"16","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/PlayScreen/index.js":"17","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/PlayScreen/PlayScreen.js":"18","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/hooks/useZoom.js":"19","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/Grid/GridEntity/index.js":"20","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/Grid/GridEntity/GridEntity.js":"21"},{"size":500,"mtime":1611522869165,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1611522869166,"results":"24","hashOfConfig":"23"},{"size":3886,"mtime":1613866459187,"results":"25","hashOfConfig":"23"},{"size":58,"mtime":1611533370715,"results":"26","hashOfConfig":"23"},{"size":4270,"mtime":1613766970047,"results":"27","hashOfConfig":"23"},{"size":204,"mtime":1613852605703,"results":"28","hashOfConfig":"23"},{"size":67,"mtime":1611542002598,"results":"29","hashOfConfig":"23"},{"size":7797,"mtime":1613859723678,"results":"30","hashOfConfig":"23"},{"size":3022,"mtime":1613857211686,"results":"31","hashOfConfig":"23"},{"size":135,"mtime":1611543749383,"results":"32","hashOfConfig":"23"},{"size":61,"mtime":1611628765985,"results":"33","hashOfConfig":"23"},{"size":5086,"mtime":1613853024453,"results":"34","hashOfConfig":"23"},{"size":1094,"mtime":1613932842928,"results":"35","hashOfConfig":"23"},{"size":67,"mtime":1611890721147,"results":"36","hashOfConfig":"23"},{"size":7020,"mtime":1613761206939,"results":"37","hashOfConfig":"23"},{"size":209,"mtime":1613684184777,"results":"38","hashOfConfig":"23"},{"size":67,"mtime":1613768006961,"results":"39","hashOfConfig":"23"},{"size":8443,"mtime":1613932756819,"results":"40","hashOfConfig":"23"},{"size":627,"mtime":1613769305355,"results":"41","hashOfConfig":"23"},{"size":67,"mtime":1613853261612,"results":"42","hashOfConfig":"23"},{"size":2483,"mtime":1613856565510,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"7frbrs",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/index.js",[],["91","92"],"/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/reportWebVitals.js",[],"/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/App.js",["93"],"import { useEffect, useState } from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\n\nimport { Button, Classes, Colors, Drawer, Icon, Position } from \"@blueprintjs/core\";\n\nimport \"./App.css\";\n\nimport GridScreen from \"./components/GridScreen\";\nimport Sidebar from \"./components/Sidebar\";\nimport EntityForm from \"./components/EntityForm\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport PlayScreen from \"./components/PlayScreen\";\n\nconst { ipcRenderer } = window.require(\"electron\");\n\nconst randomThings = [\n  \"Hi, I love you.\",\n  \"You look great.\",\n  \"You're amazing.\",\n  \"Perfect, you are.\",\n  \"Who's the best DM? You.\",\n];\n\nwindow.addEventListener(\"keydown\", function(e) {\n  // space and arrow keys\n  if([32, 37, 38, 39, 40].indexOf(e.which) > -1) {\n    e.preventDefault();\n  }\n}, false);\n\nfunction App() {\n  const [randomGoodness, setRandomGoodness] = useState(\"\");\n  const [entities, setEntities] = useState([]);\n  const [grids, setGrids] = useState([]);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [dnData, setDnData] = useState({});\n\n  const closeDrawer = () => {\n    setDrawerOpen(false);\n  };\n\n  const openDrawer = () => {\n    setDrawerOpen(true);\n  };\n\n  useEffect(() => {\n    setRandomGoodness(\n      randomThings[Math.floor(Math.random() * randomThings.length)]\n    );\n\n    (async function () {\n      const e = await ipcRenderer.sendSync(\"getStoreData\", \"entities\");\n      if (e === \"\") {\n        setEntities([]);\n      } else {\n        setEntities([].concat(JSON.parse(e)));\n      }\n\n      const g = await ipcRenderer.sendSync(\"getStoreData\", \"grids\");\n      if (g === \"\") {\n        setGrids([]);\n      } else {\n        setGrids(JSON.parse(g));\n      }\n    })();\n\n    ipcRenderer.on(\"update-grids\", (event, arg) => {\n      setGrids(JSON.parse(arg));\n    });\n\n    ipcRenderer.on(\"receive-dnd-data\", (event, arg) => {\n      const data = JSON.parse(arg);\n      setDnData((d) => ({ ...d, [data.type]: data.results }));\n    });\n\n    ipcRenderer.on(\"update-entities\", (event, arg) => {\n      setEntities(JSON.parse(arg));\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <div className=\"AppSideMenu\">\n          <div>\n            <Button icon={IconNames.MENU_OPEN} onClick={openDrawer} />\n          </div>\n\n          <div className=\"AppSideMenu__Heart\">\n            <Icon icon={IconNames.HEART} color={Colors.VIOLET5} />\n          </div>\n        </div>\n\n        <div className=\"RouteContents\">\n          <Route path=\"/grid\" render={(props) => (\n            <GridScreen {...props} entities={entities} grids={grids} />\n          )} exact />\n          <Route path=\"/grid/:gridId\" render={(props) => (\n            <GridScreen {...props} entities={entities} grids={grids} />\n          )} />\n          <Route path=\"/entity\" render={(props) => (\n            <EntityForm {...props} entities={entities} grids={grids} />\n          )} exact />\n          <Route\n            path=\"/entity/:entityId\"\n            render={(props) => (\n              <EntityForm {...props} entities={entities} grids={grids} />\n            )}\n            exact\n          />\n          <Route\n            path=\"/play/:gridId\"\n            render={(props) => (\n              <PlayScreen {...props} entities={entities} grids={grids} />\n            )}\n            exact\n          />\n        </div>\n\n        <Drawer\n          position={Position.LEFT}\n          isOpen={drawerOpen}\n          title={randomGoodness}\n          size={Drawer.SIZE_SMALL}\n          onClose={closeDrawer}\n        >\n          <div className={Classes.DRAWER_BODY}>\n            <div className={Classes.DIALOG_BODY}>\n              <Sidebar\n                entities={entities}\n                grids={grids}\n                closeDrawer={closeDrawer}\n              />\n            </div>\n          </div>\n        </Drawer>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/Sidebar/index.js",[],"/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/Sidebar/Sidebar.js",["94","95"],"import {\n  Button,\n  Classes,\n  Icon,\n  Intent,\n  Menu,\n  MenuItem,\n  Position,\n  Tree,\n} from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport { Popover2 } from \"@blueprintjs/popover2\";\nimport { useEffect, useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { EntityTypes } from \"../../entities\";\n\nimport \"./Sidebar.css\";\n\nconst { ipcRenderer } = window.require(\"electron\");\n\nconst NewMenu = ({ closeDrawer = () => {} }) => {\n  const [route, setRoute] = useState(null);\n\n  const handleMenuClick = (r) => () => {\n    closeDrawer();\n    setRoute(r);\n  };\n\n  return (\n    <Menu>\n      {route && <Redirect to={route} />}\n      <MenuItem\n        icon={IconNames.NEW_GRID_ITEM}\n        text=\"New Grid\"\n        onClick={handleMenuClick(\"/grid\")}\n      />\n      <MenuItem\n        icon={IconNames.NEW_PERSON}\n        text=\"New Entity\"\n        onClick={handleMenuClick(\"/entity\")}\n      />\n    </Menu>\n  );\n};\n\nconst Sidebar = ({ closeDrawer = () => {}, entities = [], grids = [] }) => {\n  const [treeContents, setTreeContents] = useState([]);\n  const [redirectToGrid, setRedirectToGrid] = useState(null);\n  const [redirectToEntity, setRedirectToEntity] = useState(null);\n\n  useEffect(() => {\n    const tree = [\n      {\n        key: \"grids000\",\n        id: \"grids\",\n        icon: IconNames.GRID,\n        hasCaret: true,\n        label: \"Grids\",\n        childNodes: grids.map((grid) => ({\n          id: grid.gridId,\n          key: grid.gridId,\n          label: grid.name,\n          icon: IconNames.MAP,\n        })),\n      },\n      {\n        key: \"entities000\",\n        id: \"entities\",\n        icon: IconNames.PERSON,\n        hasCaret: true,\n        label: \"Entities\",\n        childNodes: entities.map((entity, i) => ({\n          id: entity.entityId,\n          key: entity.entityId,\n          label: entity.name,\n          icon:\n            entity.type === EntityTypes.PLAYER\n              ? IconNames.PERSON\n              : IconNames.WALK,\n          secondaryLabel: <span>{entity.type}</span>,\n        })),\n      },\n    ];\n\n    setTreeContents(tree);\n  }, [entities, grids]);\n\n  const handleNodeClick = (nodeData) => {\n    if (!nodeData.childNodes) {\n      if (nodeData.icon === IconNames.MAP) {\n        setRedirectToGrid(nodeData.id);\n        closeDrawer();\n      } else {\n        setRedirectToEntity(nodeData.id);\n        closeDrawer();\n      }\n    }\n  };\n\n  const handleNodeExpand = (nodeData) => {\n    const nodes = forEachNode(treeContents, (n) => {\n      if (n.id === nodeData.id) {\n        n.isExpanded = true;\n      }\n    });\n    setTreeContents([].concat(nodes));\n  };\n\n  const handleNodeCollapse = (nodeData) => {\n    const nodes = forEachNode(treeContents, (n) => {\n      if (n.id === nodeData.id) {\n        n.isExpanded = false;\n      }\n    });\n    setTreeContents([].concat(nodes));\n  };\n\n  const forEachNode = (nodes, callback = () => {}) => {\n    if (nodes == null) {\n      return;\n    }\n\n    for (let node of nodes) {\n      callback(node);\n      node = forEachNode(node.childNodes, callback);\n    }\n\n    return nodes;\n  };\n\n  const deleteData = () => {\n    return ipcRenderer.sendSync(\"wipeData\");\n  };\n\n  return (\n    <div>\n      {redirectToGrid && <Redirect to={`/grid/${redirectToGrid}`} />}\n      {redirectToEntity && <Redirect to={`/entity/${redirectToEntity}`} />}\n\n      <h2>Create / Edit</h2>\n      <Tree\n        className={`${Classes.ELEVATION_0}`}\n        contents={treeContents}\n        onNodeCollapse={handleNodeCollapse}\n        onNodeExpand={handleNodeExpand}\n        onNodeClick={handleNodeClick}\n      />\n\n      <div className=\"SideBarNewButtonWrapper\">\n        <Popover2\n          content={<NewMenu closeDrawer={closeDrawer} />}\n          inheritDarkTheme\n          placement={Position.BOTTOM}\n          minimal={false}\n          usePortal\n        >\n          <Button\n            icon={IconNames.PLUS}\n            intent={Intent.PRIMARY}\n            rightIcon={IconNames.CARET_DOWN}\n          >\n            Create New Things\n          </Button>\n        </Popover2>\n      </div>\n\n      <div className=\"SideBarNewButtonWrapper\">\n        <Button intent={Intent.WARNING} onClick={deleteData}>\n          Delete all Data\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/entities.js",[],"/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/GridScreen/index.js",[],"/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/GridScreen/GridScreen.js",["96"],"import { IconNames } from \"@blueprintjs/icons\";\nimport { useEffect, useState } from \"react\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport { fetchCellData, updateCell } from \"../../cells\";\nimport CellForm from \"./CellForm\";\nimport { results as monsters } from \"../../data/monsters.json\";\nimport keyboardjs from \"keyboardjs\";\n\nimport \"./GridScreen.css\";\n\nconst { ipcRenderer } = window.require(\"electron\");\n\nconst {\n  FormGroup,\n  InputGroup,\n  NumericInput,\n  Button,\n  Intent,\n  Switch,\n} = require(\"@blueprintjs/core\");\n\nconst { default: Grid } = require(\"../Grid/Grid\");\n\nconst GRID_DEFAULTS = 8;\n\nconst GridScreen = ({ entities = [], grids = [] }) => {\n  const [name, setName] = useState(\"\");\n  const [width, setWidth] = useState(GRID_DEFAULTS);\n  const [height, setHeight] = useState(GRID_DEFAULTS);\n  const [selectedCell, setSelectedCell] = useState({});\n  const [saving, setSaving] = useState(false);\n  const [saved, setSaved] = useState(false);\n  const [obstacleModeEnabled, setObstacleModeEnabled] = useState(false);\n  const [zoom, setZoom] = useState(5);\n  const [availableEntities, setAvailableEntities] = useState([]);\n  const [availableMonsters, setAvailableMonsters] = useState(monsters);\n  const [redirect, setRedirect] = useState(null);\n\n  const { gridId } = useParams();\n\n  const [gridInfo, setGridInfo] = useState({\n    width: GRID_DEFAULTS,\n    height: GRID_DEFAULTS,\n    cells: [],\n  });\n\n  useEffect(() => {\n    keyboardjs.bind('command + o', (e) => {\n      e.preventRepeat();\n      setObstacleModeEnabled(o => !o);\n    });\n\n    keyboardjs.bind('-', (e) => {\n      setZoom((z) => {\n        if (z > 0) {\n          return z - 1;\n        }\n\n        return z;\n      });\n    });\n\n    keyboardjs.bind('=', (e) => {\n      setZoom((z) => {\n        if (z < 10) {\n          return z + 1;\n        }\n\n        return z;\n      });\n    });\n\n    return () => {\n      keyboardjs.unbind('command + o');\n      keyboardjs.unbind('-');\n      keyboardjs.unbind('=');\n    };\n  }, []);\n\n  useEffect(() => {\n    setAvailableEntities(entities);\n  }, [entities]);\n\n  useEffect(() => {\n    for (let i = 0; i < grids.length; i++) {\n      if (grids[i].gridId === parseInt(gridId)) {\n        setGridInfo(grids[i]);\n        setWidth(grids[i].width);\n        setHeight(grids[i].height);\n        setName(grids[i].name);\n      }\n    }\n  }, [grids, gridId]);\n\n  useEffect(() => {\n    if (!saving) {\n      setSaved(true);\n\n      const timeout = setTimeout(() => {\n        setSaved(false);\n      }, 5000);\n\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [saving]);\n\n  const onNameChange = (e) => {\n    const val = e.target.value;\n    setName(val);\n    setGridInfo((info) => {\n      info.name = val;\n\n      return info;\n    });\n  };\n\n  const setWidthVal = (num) => {\n    if(!isNaN(num)) {\n      setWidth(num);\n      setGridInfo((info) => {\n        info.width = num;\n  \n        return info;\n      });  \n    }\n  };\n\n  const setHeightVal = (num) => {\n    if(!isNaN(num)) {\n      setHeight(num);\n      setGridInfo((info) => {\n        info.height = num;\n\n        return info;\n      });\n    }\n  };\n\n  const onCellClick = (x, y) => {\n    if (obstacleModeEnabled) {\n      setGridInfo((info) => {\n        const i = Object.assign(\n          {},\n          updateCell(info, x, y, (d) => {\n            if (d.isObstacled) {\n              delete d.isObstacled;\n            } else {\n              d.isObstacled = true;\n            }\n\n            return d;\n          })\n        );\n\n        return i;\n      });\n\n      return;\n    }\n\n    if (selectedCell.x !== x || selectedCell.y !== y) {\n      setSelectedCell({\n        ...fetchCellData(gridInfo, x, y),\n        actuallyExists: true,\n      });\n    }\n  };\n\n  const saveGrid = async () => {\n    setSaving(true);\n\n    if (!gridInfo.gridId) {\n      gridInfo.gridId = Date.now();\n    }\n\n    await ipcRenderer.sendSync(\"saveGrid\", gridInfo);\n    setGridInfo(gridInfo);\n    setSaving(false);\n  };\n\n  const playGrid = async () => {\n    setRedirect(`/play/${gridInfo.gridId}`);\n  };\n\n  const handleObstacleModeChange = () => {\n    setObstacleModeEnabled((o) => {\n      return !o;\n    });\n  };\n\n  const onEntitySelect = (oldEntity, newEntity) => {\n    setAvailableEntities(es => {\n      const newEntities = availableEntities;\n      if (newEntity?.entityId) {\n        for (let i = 0; i < newEntities.length; i++) {\n          if (newEntities[i].entityId === newEntity.entityId) {\n            newEntities.splice(i, 1);\n            break;\n          }\n        }\n      }\n\n      if (oldEntity?.entityId) {\n        const some = newEntities.some(v => v.entityId === oldEntity.entityId);\n\n        if (!some) {\n          newEntities.push(oldEntity);\n        }\n      }\n\n      return [].concat(newEntities);\n    });\n  };\n\n  return (\n    <div>\n      {redirect && <Redirect to={redirect} />}\n\n      <div className=\"GridScreenGridFormWrapper\">\n        <h1>\n          {!gridId && \"New Grid (\"}\n          {name}\n          {!gridId && \")\"}\n        </h1>\n\n        {(name || gridId) && (\n          <Button\n            onClick={playGrid}\n            icon={IconNames.PLAY}\n            intent={Intent.SUCCESS}\n            fill\n            className=\"GridScreen__SaveButton\"\n          >\n            Start Play Mode\n          </Button>\n        )}\n\n        <div className=\"Row\">\n          <div className=\"Col\">\n            <FormGroup label=\"Grid Name\" labelFor=\"grid-name\">\n              <InputGroup\n                leftIcon={IconNames.EDIT}\n                id=\"grid-name\"\n                placeholder=\"Choose a name, make it güd\"\n                onChange={onNameChange}\n                defaultValue={name === \"\" ? null : name}\n              />\n            </FormGroup>\n\n            <FormGroup label=\"Grid Height\" labelFor=\"grid-height\">\n              <NumericInput\n                leftIcon={IconNames.ARROWS_VERTICAL}\n                id=\"grid-height\"\n                min={5}\n                max={20}\n                defaultValue={GRID_DEFAULTS}\n                value={height}\n                onValueChange={setHeightVal}\n              />\n            </FormGroup>\n\n            <FormGroup label=\"Grid Width\" labelFor=\"grid-width\">\n              <NumericInput\n                leftIcon={IconNames.ARROWS_HORIZONTAL}\n                id=\"grid-width\"\n                min={5}\n                max={20}\n                value={width}\n                defaultValue={GRID_DEFAULTS}\n                onValueChange={setWidthVal}\n              />\n            </FormGroup>\n\n            {(name || gridId) && (\n              <Button\n                disabled={saving}\n                onClick={saveGrid}\n                icon={!saved ? IconNames.UPLOAD : IconNames.SAVED}\n                intent={Intent.PRIMARY}\n                fill\n                className=\"GridScreen__SaveButton\"\n              >\n                Save\n              </Button>\n            )}\n\n            <Switch\n              checked={obstacleModeEnabled}\n              labelElement={<strong>Obstacle Mode</strong>}\n              onChange={handleObstacleModeChange}\n              large\n            />\n\n\n            {selectedCell.actuallyExists && (\n              <CellForm\n                selectedCell={selectedCell}\n                setGridInfo={setGridInfo}\n                entities={availableEntities}\n                onEntitySelect={onEntitySelect}\n                monsters={availableMonsters}\n                gridInfo={gridInfo}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"GridScreen__Grid\">\n        <Grid\n          width={gridInfo.width}\n          height={gridInfo.height}\n          selectedCell={selectedCell}\n          onCellClick={onCellClick}\n          gridInfo={gridInfo}\n          zoom={zoom}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default GridScreen;\n","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/Grid/Grid.js",[],"/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/alphabet.js",[],"/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/GridScreen/CellForm/index.js",[],"/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/GridScreen/CellForm/CellForm.js",["97","98","99"],"import {\n  Button,\n  FormGroup,\n  MenuItem,\n  Radio,\n  RadioGroup,\n} from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport { Select } from \"@blueprintjs/select\";\nimport { useCallback, useEffect, useState } from \"react\";\n\nimport { AlphabetFromNum } from \"../../../alphabet\";\nimport { fetchCellData, updateCell } from \"../../../cells\";\nimport { fetchFromCache } from \"../../../services/cache\";\nimport keyboardjs from \"keyboardjs\";\nimport { EntitySizes } from \"../../../entities\";\n\nconst filterByName = (query, item) => {\n  if (item.name.toLowerCase().indexOf(query.toLowerCase()) > -1) {\n    return true;\n  }\n\n  return false;\n};\n\nconst EntitySelect = (entity, { handleClick, modifiers }, onEntitySelect = () => {}) => {\n  return (\n    <MenuItem\n      onClick={handleClick}\n      active={modifiers.active}\n      key={entity.entityId}\n      text={entity.name}\n    />\n  );\n};\n\nconst CellForm = ({ onEntitySelect = () => {}, selectedCell = {}, gridInfo = {}, setGridInfo = () => {}, entities = [], monsters = [] }) => {\n  const [occupant, setOccupant] = useState(\"empty\");\n  const [entityLists, setEntityLists] = useState({});\n  const [entity, setEntity] = useState(null);\n  const [mob, setMob] = useState({});\n  const [cellInfo, setCellInfo] = useState({});\n\n  useEffect(() => {\n    keyboardjs.bind('command + e', (e) => {\n      e.preventRepeat();\n\n      clearCell();\n    });\n\n    return () => {\n      keyboardjs.unbind('command + e');\n    };\n  }, []);\n\n  useEffect(() => {\n    setEntityLists(entities);\n  }, [entities]);\n\n  useEffect(() => {\n    setOccupant(\"empty\");\n    setEntity(null);\n    setMob(null);\n\n    if (selectedCell.isObstacled) {\n      setOccupant(\"obstacle\");\n      setEntity(null);\n    } else if (selectedCell.entity) {\n      setEntity(selectedCell.entity);\n      setOccupant(\"entity\");\n    } else if (selectedCell.monster) {\n      setOccupant(\"monster\");\n      setMob(selectedCell.monster);\n    }\n\n    setCellInfo(selectedCell);\n  }, [selectedCell]);\n\n  useEffect(() => {\n    setGridInfo((info) => {\n      return Object.assign(\n        {},\n        updateCell(info, cellInfo.x, cellInfo.y, (d) => {\n          d.isObstacled = occupant === \"obstacle\";\n\n          if (occupant === \"entity\") {\n            d.entity = entity;\n            d.monster = null;\n          } else if (occupant === \"monster\") {\n            d.entity = null;\n            d.monster = mob;\n          } else if (occupant === \"obstacle\" || occupant === \"empty\") {\n            d.entity = null;\n            d.monster = null;\n          }\n  \n          return d;\n        })\n      );\n    });  \n  }, [occupant, entity, mob, setGridInfo, cellInfo]);\n\n  const clearCell = () => {\n    setOccupant(\"empty\");\n    setEntity(null);\n    setMob(null);\n  };\n\n  const changeOccupant = (e) => {\n    const val = e.currentTarget.value;\n    setOccupant(val);\n\n    if (val === \"obstacle\" || val === \"empty\") {\n      onEntitySelect(entity, null);\n      setEntity(null);\n      setMob(null);\n    }\n\n    if (val === \"entity\") {\n      setMob(null);\n    }\n\n    if (val === \"monster\") {\n      onEntitySelect(entity, null);\n      setEntity(null);\n    }\n  };\n\n  const onEntityChange = (e) => {\n    setEntity(old => {\n      onEntitySelect(old, e);\n\n      return e;\n    });\n  };\n\n  const onMonsterChange = async (e) => {\n    setMob(e);\n\n    if (e?.index) {\n      try {\n        const monster = await fetchFromCache('monsters', e.index);\n\n        setMob({ ...e, ...monster });\n      } catch (ex) {\n        console.log(ex);\n      }\n    }\n  };\n\n  return (\n    <div className=\"Row\">\n      <div className=\"Col\">\n        <h2>\n          Add to Cell {AlphabetFromNum(selectedCell.x)}\n          {selectedCell.y}\n        </h2>\n\n        <RadioGroup\n          label={<strong>Occupant</strong>}\n          onChange={changeOccupant}\n          selectedValue={occupant}\n        >\n          <Radio label=\"Empty\" value=\"empty\" />\n          <Radio label=\"Obstacle\" value=\"obstacle\" />\n          <Radio label=\"Entity\" value=\"entity\" />\n          <Radio label=\"Monster\" value=\"monster\" />\n        </RadioGroup>\n\n        <FormGroup>\n          {occupant && occupant === \"entity\" && <Select\n            items={entityLists}\n            itemRenderer={EntitySelect}\n            onItemSelect={onEntityChange}\n            popoverProps={{ minimal: true, targetClassName: 'SelectDropdown' }}\n          >\n            <Button alignText=\"left\" fill text={entity?.name || 'Select an Entity'} icon={IconNames.CARET_DOWN}></Button>  \n          </Select>}\n\n          {occupant && occupant === \"monster\" && <Select\n            items={monsters}\n            itemRenderer={EntitySelect}\n            onItemSelect={onMonsterChange}\n            popoverProps={{ minimal: true, targetClassName: 'SelectDropdown' }}\n            itemPredicate={filterByName}\n            initialContent={<div>Type to search 5e monsters</div>}\n          >\n            <Button alignText=\"left\" fill text={mob?.name || 'Select a Monster (spooky!)'} icon={IconNames.CARET_DOWN}></Button>  \n          </Select>}\n        </FormGroup>\n      </div>\n    </div>\n  );\n};\n\nexport default CellForm;\n","/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/cells.js",[],"/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/EntityForm/index.js",[],"/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/EntityForm/EntityForm.js",[],"/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/services/cache.js",[],"/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/PlayScreen/index.js",[],"/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/PlayScreen/PlayScreen.js",[],"/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/hooks/useZoom.js",[],"/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/Grid/GridEntity/index.js",[],"/Users/mikemclaren/Desktop/Github/mikemclaren/dungeon-grid/src/components/Grid/GridEntity/GridEntity.js",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":36,"column":10,"nodeType":"106","messageId":"107","endLine":36,"endColumn":16},{"ruleId":"104","severity":1,"message":"108","line":4,"column":3,"nodeType":"106","messageId":"107","endLine":4,"endColumn":7},{"ruleId":"104","severity":1,"message":"109","line":14,"column":10,"nodeType":"106","messageId":"107","endLine":14,"endColumn":14},{"ruleId":"104","severity":1,"message":"110","line":36,"column":29,"nodeType":"106","messageId":"107","endLine":36,"endColumn":49},{"ruleId":"104","severity":1,"message":"111","line":10,"column":10,"nodeType":"106","messageId":"107","endLine":10,"endColumn":21},{"ruleId":"104","severity":1,"message":"112","line":13,"column":10,"nodeType":"106","messageId":"107","endLine":13,"endColumn":23},{"ruleId":"104","severity":1,"message":"113","line":16,"column":10,"nodeType":"106","messageId":"107","endLine":16,"endColumn":21},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"no-unused-vars","'dnData' is assigned a value but never used.","Identifier","unusedVar","'Icon' is defined but never used.","'Link' is defined but never used.","'setAvailableMonsters' is assigned a value but never used.","'useCallback' is defined but never used.","'fetchCellData' is defined but never used.","'EntitySizes' is defined but never used.","no-global-assign","no-unsafe-negation"]